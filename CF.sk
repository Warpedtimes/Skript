

options:
	mode: "TITLE" #Set this to GUI or TITLE depending on how you want the flipping parts displayed
	minBet: 1
	maxBet: 1000000
	tax: 5 # Percentage, e.g. 5 = 5% tax

	#Display of the selected side of the coin. Format as you wish
	prefix: &6[&eCF&6]
	tails: &cTails
	heads: &aHeads



#Main Command. Determins the action and then calls the function for it.
command coinflip [<text>] [<number>] [<text>]:
	aliases: cf
	trigger:
		if arg-1 is "cancel":
			cfCancel(player)

		else if arg-1 is "bet":
			if arg-2 is set:
				if arg-3 is "head" or "tail" or "heads" or "tails":
					cfBet(player,arg 2,arg 3)
				else:
					soundNo(player)
					send "{@prefix} &cPlease specify either Heads or Tails"
			else:
				soundNo(player)
				send "{@prefix} &cPlease specify an amount"


		else if arg-1 is not set:
			cfMenu(player)

		else:
			message "&8-----{@prefix}&8-----"
			message "&eCoin Flip Usagae:"
			message "&eOpen Menu: &a/cf"
			message "&eNew Coin Flip: &a/cf bet amount heads/tails"
			message "&eCancel Coin Flip: &a/cf cancel"
			message ""
			message "&8-----{@prefix}&8-----"

#This one here is for making the main menu gui for the player
function cfMenu(p: player):
	create a gui with virtual chest inventory with 5 rows named "              &8&nCoin Flips":
		set {_uuid} to uuid of {_p}
		wait 3 ticks
		# The starting slot
		set {_slot} to 10
		loop {coinflips::*}:
			if {_slot} = 16:
				add 3 to {_slot}
			else if {_slot} >= 25:
				stop
			set {_name} to loop-index parsed as an offline player
			make gui slot {_slot} with skull of {_name} named "&f%{_name}%" with lore "" and "&7■ Side: %formatSide(getSide({_name}))%" and "&7■ Bet: &6$%formatNumber(getBet({_name}))%" and "" and "&e>> Click to play!":
				if {_p} != {_name}: # If player clicking the skull is not the player who the skull is of
					if getBet({_name}) <= {balance::%{_uuid}%}: # If the player can afford the bet
						if {cfStatus::%{_uuid}%} is not "ACTIVE": # If the player isn't current participating in a coinflip that is current playing
							if {cfStatus::%{loop-index}%} is not "ACTIVE": # Same as above but for the cf creator
								startCoinflip({_p},{_name})

							#Feedback for user. With sound	
							else:
								soundNo({_p})
								send "{@prefix} &c%{_name}% already has an active coin flip ongoing!"
						else:
							soundNo({_p})
							send "{@prefix} &cYou already have an active coin flip ongoing!"
					else:
						soundNo({_p})
						send "{@prefix} &cYou cannot afford this coinflip!"
				else:
					soundNo({_p})
					send "{@prefix} &cYou cannot gamble with yourself!"


		make gui slot 44 with emerald block of power 1 named "&a&lRefresh" with lore "&7Refresh the coin flips menu" with hidden enchants:
			cfMenu({_p})
			play sound "entity.experience_orb.pickup" with volume 0.5 with pitch 1 at {_p}		
		make gui slot 36 with writable book named "&e&lStats" with lore "&aWins: &f%{cf.wins::%{_p}%}%" and "&cLoses: &f%{cf.loses::%{_p}%}%"
		make gui slot 37 with lectern named "&e&lHelp?" with lore "&7■ To create a new coinflip use &e/cf amount heads/tails" and "&7■ To play someones coin flip simply click their head" and "&7■ Winning will grant you the sum of the bet minus tax (5%%)"
		make gui slot 38 with gold ingot named "&e&lGambling Tax" with lore "&7Tax Rate: {@tax}%%" and "&7Taxed Total: &6$%formatNumber({taxedTotal})%"
		open gui last gui to {_p}


function cfBet(p: player, bet: number, side: text):
	set {_uuid} to uuid of {_p}
	if {coinflips::%{_uuid}%} is not set: # Make sure the player doesn't have an already active bet
		if {_bet} <= {@maxBet}:
			if {_bet} >= {@minBet}:
				if {_bet} <= {balance::%{_uuid}%}:
					set {coinflips::%{_uuid}%} to "%{_uuid}%|%{_bet}%|%{_side}%"
					remove {_bet} from {balance::%{_uuid}%}
					play sound "entity.experience_orb.pickup" with volume 0.5 with pitch 1 at {_p} for {_p}
					send "{@prefix} &aNew Coin Flip Created! &e$%formatNumber({_bet})% &aon %{_side} in strict proper case%" to {_p}
					cfMenu({_p})
				else:
					soundNo({_p})
					send "{@prefix} &cYou cannot afford this coinflip!" to {_p}
			else:
				soundNo({_p})
				send "{@prefix} &cBet cannot be less that &6$%formatNumber({@minBet})%" to {_p}
		else:
			soundNo({_p})
			send "{@prefix} &cBet cannot be more that &6$%formatNumber({@maxBet})%" to {_p}
	else:
		soundNo({_p})
		send "{@prefix} &cCoin Flip already active! Use /cf cancel" to {_p}

function cfCancel(p: player):
	set {_uuid} to uuid of {_p}
	if {coinflips::%{_uuid}%} is set:
		add getBet({_p}) to {balance::%{_uuid}%}
		play sound "entity.experience_orb.pickup" with volume 0.5 with pitch 1 at {_p} for {_p}
		send "{@prefix} &aCoin Flip canceled. Refunded &6$%formatNumber(getBet({_p}))%" to {_p}
		delete {coinflips::%{_uuid}%}
	else:
		soundNo({_p})
		send "{@prefix} &cNo active Coin Flips!" to {_p}

#Cancel command
on disconnect:
	execute player command "cf cancel"


function startCoinflip(p1: player, p2: player):
	set {_p1.uuid} to uuid of {_p1}
	set {_p2.uuid} to uuid of {_p2}

	set {cfStatus::%{_p1.uuid}%} to "ACTIVE"
	set {cfStatus::%{_p2.uuid}%} to "ACTIVE"

	set {_bet} to getBet({_p2})
	remove {_bet} from {balance::%{_p1.uuid}%}

	set {_p1.side} to formatSide(getOtherSide(getSide({_p2})))
	set {_p2.side} to formatSide(getSide({_p2}))

	# Clear the record in the list
	clear {coinflips::%{_p2.uuid}%}

	set {_r} to a random integer between 1 and 2
	if {_r} = 1:
		set {_winner} to {_p1}
		set {_loser} to {_p2}
		set {_winSide} to {_p1.side}
	else:
		set {_winner} to {_p2}
		set {_loser} to {_p1}
		set {_winSide} to {_p2.side}

	#Setting some values used in the menus
	set {_winnings} to ({_bet} * 2) * 1-({@tax}/100)
	set {_betDisplay} to formatNumber({_bet})
	set {_betDisplayTaxed} to formatNumber({_winnings})

	if {@mode} = "TITLE":
		close {_p1}'s inventory
		close {_p2}'s inventory

		set {_n} to a random integer between 10 and 30
		set {_base} to {_n} / 2
		loop {_n} times:
			set {_base} to {_base} - 0.4 
			set {_time} to round(1 / {_base} * 10 * 1.1 * 1.2) / 10

			play sound "entity.experience_orb.pickup" with volume 0.2 at {_p1} and {_p2} for {_p1} and {_p2}
			play sound "ui.button.click" with volume 0.1 at {_p1} and {_p2} for {_p1} and {_p2}
			send title "%{_p1.side}%" with subtitle "%{_p1}%" to {_p1} and {_p2}
			wait "%{_time}% seconds" parsed as a timespan
			play sound "entity.experience_orb.pickup" with volume 0.2 at {_p1} and {_p2} for {_p1} and {_p2}
			play sound "ui.button.click" with volume 0.1 at {_p1} and {_p2} for {_p1} and {_p2}

			send title "%{_p2.side}%" with subtitle "%{_p2}%" to {_p1} and {_p2}
			wait "%{_time}% seconds" parsed as a timespan
		send title "%{_winSide}% WINS" with subtitle "&6+ $%{_betDisplayTaxed}%" to {_winner} for 3 seconds
		send title "%{_winSide}% WINS" with subtitle "&c- $%{_betDisplay}%" to {_loser} for 3 seconds

	else:
		create a gui with virtual chest inventory with 1 rows named "              &8&nCoin Flips":
			make gui slot 2 with skull of {_p1} named "&f%{_p1}%" with lore "" and "%{_p1.side}%"
			make gui slot 6 with skull of {_p2} named "&f%{_p2}%" with lore "" and "%{_p2.side}%"

			make gui slot 4 with green stained glass pane named "{@heads}"
			open gui last gui to {_p1} and {_p2}

			set {_number} to a random integer between 10 and 30
			set {_base} to {_number} / 2
			loop {_number} times:
				set {_base} to {_base} - 0.4 
				set {_time} to round(1 / {_base} * 10 * 1.1 * 1.2) / 10
				play sound "entity.experience_orb.pickup" with volume 0.2 at {_p1} and {_p2} for {_p1} and {_p2}
				play sound "ui.button.click" with volume 0.1 at {_p1} and {_p2} for {_p1} and {_p2}
				make gui slot 4 with red stained glass pane named "{@tails}"
				wait "%{_time}% seconds" parsed as a timespan
				play sound "entity.experience_orb.pickup" with volume 0.2 at {_p1} and {_p2} for {_p1} and {_p2}
				play sound "ui.button.click" with volume 0.1 at {_p1} and {_p2} for {_p1} and {_p2}
				make gui slot 4 with green stained glass pane named "{@heads}"
				wait "%{_time}% seconds" parsed as a timespan

			if {_winSide} contains "tail":
				make gui slot 4 with red stained glass pane named "{@tails} Wins!" with lore "&a%{_winner}% won &6$%{_betDisplayTaxed}%"
			else:
				make gui slot 4 with green stained glass pane named "{@heads} Wins!" with lore "&a%{_winner}% won &6$%{_betDisplayTaxed}%"

	#Win effects for winner. Also chat feedback
	play sound "ui.button.click" with volume 0.1 at {_p1} and {_p2} for {_p1} and {_p2}
	send "{@prefix} &cCoin Flip Lost. - $%{_betDisplay}%" to {_loser}
	send "{@prefix} &aCoin Flip Won! + $%{_betDisplayTaxed}% &7(5%% Taxed)" to {_winner}
	play sound "entity.villager.death" with volume 0.2 at {_loser} for {_loser}
	loop 4 times:
		play sound "entity.player.levelup" with volume 0.2 at {_winner} for {_winner}
		wait 15 ticks

	#Paying out the winner
	set {_winnerUUID} to uuid of {_winner}
	set {_loserUUID} to uuid of {_loser}
	add {_winnings} to {balance::%{_winnerUUID}%}

	add 1 to {cf.wins::%{_winnerUUID}%}
	add 1 to {cf.loses::%{_loserUUID}%}

	#Increasing global tax collected (dont want op'd players with infinite money to effect this)
	if {_p1} or {_p2} is not op:
		add {_winnings}*({@tax}/100) to {taxedTotal}

	set {cfStatus::%{_p1.uuid}%} to "INACTIVE"
	set {cfStatus::%{_p2.uuid}%} to "INACTIVE"


#Just an incase if the server shuts down
on join:
	if {cfStatus::%{_p1.uuid}%} is "ACTIVE":
		cfCancel(player)

# Make sure player variables are set
on join:
	if {cf.wins::%player's uuid%} is not set:
		set {cf.wins::%player's uuid%} to 0
	if {cf.loses::%player's uuid%} is not set:
		set {cf.loses::%player's uuid%} to 0

# Make sure server variables are set
on load:
	if {taxedTotal} is not set:
		set {taxedTotal} to 0

# Function to return the string of data
function getData(p: player) :: strings:
	loop {coinflips::*}:
		if loop-index is uuid of {_p}:
			return loop-value split at "|"

# Get the amount of the players bet
function getBet(p: player) :: number:
	set {_data::*} to getData({_p})
	return {_data::2} parsed as number

# Get the side the player is betting on
function getSide(p: player) :: text:
	set {_data::*} to getData({_p})
	return {_data::3}

# Returns the other side
function getOtherSide(side: text) :: text:
	if {_side} contains "head":
		return "tail"
	else:
		return "head"

# Format the side to follow the options format
function formatSide(side: text) :: text:
	if {_side} contains "head":
		return "{@heads}"
	else:
		return "{@tails}"


# Play the sound effect for no. Its a function because Its used often and as a function it can be easily changed
function soundNo(p: player):
	play sound "entity.villager.no" with volume 0.2 with pitch 1 at {_p} for {_p}

#This one makes the numbers nice and formatted.
function formatNumber(n: object) :: text:
    if "%{_n}%" contains ".":
        set {_s::*} to split "%{_n}%" at "."
        set {_n} to "%a({_s::1})%.%last 2 characters of {_s::2}%"
        return "%{_n}%"
    else:
        set {_n} to a("%{_n}%")
        return "%{_n} ? 0%"
function a(b: text) :: text:
    if length of {_b} > 3:
        return "%a(first length of {_b} - 3 characters of {_b})%,%last 3 characters of {_b}%"
    return {_b}

